---
# Namespace for the data platform
apiVersion: v1
kind: Namespace
metadata:
  name: infra
  labels:
    name: infra

---
# ZooKeeper StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: infra
spec:
  serviceName: zookeeper
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.4.0
        ports:
        - containerPort: 2181
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        - name: ZOOKEEPER_4LW_COMMANDS_WHITELIST
          value: "mntr,conf,ruok,stat"
        volumeMounts:
        - name: zookeeper-data
          mountPath: /var/lib/zookeeper/data
        - name: zookeeper-logs
          mountPath: /var/lib/zookeeper/log
        livenessProbe:
          tcpSocket:
            port: 2181
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "echo ruok | nc localhost 2181"
          initialDelaySeconds: 15
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: zookeeper-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: hostpath
      resources:
        requests:
          storage: 10Gi
  - metadata:
      name: zookeeper-logs
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: hostpath
      resources:
        requests:
          storage: 5Gi

---
# ZooKeeper Service
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: infra
spec:
  selector:
    app: zookeeper
  ports:
  - port: 2181
    targetPort: 2181
  clusterIP: None

---
# Kafka StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: infra
spec:
  serviceName: kafka
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.4.0
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-0.kafka.infra.svc.cluster.local:9092"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_LOG_RETENTION_HOURS
          value: "168"
        - name: KAFKA_LOG_SEGMENT_BYTES
          value: "1073741824"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "PLAINTEXT"
        volumeMounts:
        - name: kafka-data
          mountPath: /kafka
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "kafka-topics --bootstrap-server localhost:9092 --list"
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "kafka-topics --bootstrap-server localhost:9092 --list"
          initialDelaySeconds: 30
          periodSeconds: 10
      initContainers:
      - name: wait-for-zookeeper
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z zookeeper 2181; do echo waiting for zookeeper; sleep 2; done;']
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: hostpath
      resources:
        requests:
          storage: 50Gi

---
# Kafka Service
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: infra
spec:
  selector:
    app: kafka
  ports:
  - port: 9092
    targetPort: 9092
  clusterIP: None

---
# Kafka External Service (LoadBalancer)
apiVersion: v1
kind: Service
metadata:
  name: kafka-external
  namespace: infra
spec:
  type: LoadBalancer
  selector:
    app: kafka
  ports:
  - port: 9092
    targetPort: 9092

---
# Kafka UI Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui
  namespace: infra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-ui
  template:
    metadata:
      labels:
        app: kafka-ui
    spec:
      containers:
      - name: kafka-ui
        image: provectuslabs/kafka-ui:latest
        ports:
        - containerPort: 8080
        env:
        - name: KAFKA_CLUSTERS_0_NAME
          value: "local"
        - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
          value: "kafka:9092"
        - name: KAFKA_CLUSTERS_0_ZOOKEEPER
          value: "zookeeper:2181"
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10

---
# Kafka UI Service
apiVersion: v1
kind: Service
metadata:
  name: kafka-ui
  namespace: infra
spec:
  type: LoadBalancer
  selector:
    app: kafka-ui
  ports:
  - port: 8080
    targetPort: 8080

---
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: infra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "rootpassword"
        - name: MYSQL_DATABASE
          value: "projects"
        - name: MYSQL_USER
          value: "appuser"
        - name: MYSQL_PASSWORD
          value: "apppassword"
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        - name: mysql-init
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: mysql-init
        hostPath:
          path: /Users/ganten/workspace/github/jurong/mysql/init
          type: Directory

---
# MySQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: infra
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: hostpath
  resources:
    requests:
      storage: 20Gi

---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: infra
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306

---
# MySQL External Service
apiVersion: v1
kind: Service
metadata:
  name: mysql-external
  namespace: infra
spec:
  type: LoadBalancer
  selector:
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306

---
# phpMyAdmin Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phpmyadmin
  namespace: infra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: phpmyadmin
  template:
    metadata:
      labels:
        app: phpmyadmin
    spec:
      containers:
      - name: phpmyadmin
        image: phpmyadmin/phpmyadmin
        ports:
        - containerPort: 80
        env:
        - name: PMA_HOST
          value: "mysql"
        - name: PMA_USER
          value: "root"
        - name: PMA_PASSWORD
          value: "rootpassword"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10

---
# phpMyAdmin Service
apiVersion: v1
kind: Service
metadata:
  name: phpmyadmin
  namespace: infra
spec:
  type: LoadBalancer
  selector:
    app: phpmyadmin
  ports:
  - port: 8081
    targetPort: 80

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: infra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - redispassword
        volumeMounts:
        - name: redis-data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - redispassword
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - redispassword
            - ping
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: infra
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: hostpath
  resources:
    requests:
      storage: 10Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: infra
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# Redis External Service
apiVersion: v1
kind: Service
metadata:
  name: redis-external
  namespace: infra
spec:
  type: LoadBalancer
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# Redis Commander Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-commander
  namespace: infra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-commander
  template:
    metadata:
      labels:
        app: redis-commander
    spec:
      containers:
      - name: redis-commander
        image: rediscommander/redis-commander:latest
        ports:
        - containerPort: 8081
        env:
        - name: REDIS_HOSTS
          value: "local:redis:6379:0:redispassword"
        livenessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10

---
# Redis Commander Service
apiVersion: v1
kind: Service
metadata:
  name: redis-commander
  namespace: infra
spec:
  type: LoadBalancer
  selector:
    app: redis-commander
  ports:
  - port: 8082
    targetPort: 8081